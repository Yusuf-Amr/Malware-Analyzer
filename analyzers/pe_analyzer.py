from .base_analyzer import BaseAnalyzer
from utils.hash_calculator import calculate_file_hash
from utils.extracting_strings import extract_strings
import pefile

class PEAnalyzer(BaseAnalyzer):
    def analyze(self):
        try:
            pe = pefile.PE(self.file_path)
            imports = []
            exports = []

            if hasattr(pe, 'DIRECTORY_ENTRY_IMPORT'):
                for entry in pe.DIRECTORY_ENTRY_IMPORT:
                    for imp in entry.imports:
                        imports.append(f'{entry.dll.decode()} : {imp.name.decode() if imp.name else "Ordinal"}')

            if hasattr(pe, 'DIRECTORY_ENTRY_EXPORT'):
                for exp in pe.DIRECTORY_ENTRY_EXPORT.symbols:
                    exports.append(f'{exp.name.decode()} : {exp.address}')

            sections = [{
                'Name': section.Name.decode().strip('\x00'),
                'VirtualAddress': hex(section.VirtualAddress),
                'SizeOfRawData': section.SizeOfRawData,
                'Characteristics': hex(section.Characteristics)
            } for section in pe.sections]

            extracted_strings = extract_strings(self.file_path)

            return {
                'file_path': self.file_path,
                'file_hash': calculate_file_hash(self.file_path),
                'imports': imports,
                'exports': exports,
                'sections': sections,
                'extracted_strings': extracted_strings,
            }

        except pefile.PEFormatError as e:
            return {
                'file_path': self.file_path,
                'error': str(e),
            }
