from pptx import Presentation
from .base_analyzer import BaseAnalyzer
from utils.hash_calculator import calculate_file_hash
import subprocess

class PPTXAnalyzer(BaseAnalyzer):
    def extract_metadata(self, presentation):
        properties = presentation.core_properties
        metadata = {
            'author': properties.author,
            'title': properties.title,
            'subject': properties.subject,
            'keywords': properties.keywords,
            'last_modified_by': properties.last_modified_by,
            'revision': properties.revision,
            'created': properties.created,
            'modified': properties.modified,
        }
        return metadata

    def run_command(self, command):
        try:
            output = subprocess.check_output(command, shell=True, text=True)
        except subprocess.CalledProcessError as e:
            output = e.output
        return output

    def analyze(self):
        try:
            presentation = Presentation(self.file_path)
            slides = []
            for slide in presentation.slides:
                slide_text = []
                for shape in slide.shapes:
                    if hasattr(shape, "text"):
                        slide_text.append(shape.text)
                slides.append(slide_text)

            metadata = self.extract_metadata(presentation)
            oleid_output = self.run_command(f"oleid {self.file_path}")
            olevba_output = self.run_command(f"olevba {self.file_path}")
            mraptor_output = self.run_command(f"mraptor {self.file_path}")

            return {
                'file_path': self.file_path,
                'file_hash': calculate_file_hash(self.file_path),
                'slides': slides,
                'metadata': metadata,
                'oleid_output': oleid_output,
                'olevba_output': olevba_output,
                'mraptor_output': mraptor_output
            }
        except Exception as e:
            return {
                'file_path': self.file_path,
                'error': str(e),
            }
