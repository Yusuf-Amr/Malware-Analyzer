from .base_analyzer import BaseAnalyzer
from docx import Document
from utils.hash_calculator import calculate_file_hash
import subprocess

class DOCXAnalyzer(BaseAnalyzer):
    def extract_metadata(self, doc):
        core_properties = doc.core_properties
        metadata = {
            'author': core_properties.author,
            'title': core_properties.title,
            'subject': core_properties.subject,
            'keywords': core_properties.keywords,
            'last_modified_by': core_properties.last_modified_by,
            'revision': core_properties.revision,
            'created': core_properties.created.isoformat() if core_properties.created else 'N/A',
            'modified': core_properties.modified.isoformat() if core_properties.modified else 'N/A',
        }
        return metadata

    def run_command(self, command):
        try:
            output = subprocess.check_output(command, shell=True, text=True)
        except subprocess.CalledProcessError as e:
            output = e.output
        return output

    def format_output(self, output, tool_name):
        lines = output.splitlines()
        formatted_output = f"\n{tool_name} Output\n"
        formatted_output += "\n".join(lines)
        return formatted_output

    def analyze(self):
        try:
            doc = Document(self.file_path)
            docx_paragraphs = [p.text for p in doc.paragraphs]
            metadata = self.extract_metadata(doc)

            # Running oletools 
            oleid_output = self.run_command(f"oleid {self.file_path}")
            olevba_output = self.run_command(f"olevba {self.file_path}")
            mraptor_output = self.run_command(f"mraptor {self.file_path}")

            formatted_oleid_output = self.format_output(oleid_output, "Oleid")
            formatted_olevba_output = self.format_output(olevba_output, "Olevba")
            formatted_mraptor_output = self.format_output(mraptor_output, "Mraptor")

            return {
                'file_path': self.file_path,
                'file_hash': calculate_file_hash(self.file_path),
                'docx_paragraphs': docx_paragraphs,
                'metadata': metadata,
                'oleid_output': formatted_oleid_output,
                'olevba_output': formatted_olevba_output,
                'mraptor_output': formatted_mraptor_output
            }
        except Exception as e:
            return {
                'file_path': self.file_path,
                'error': f"An error occurred during analysis: {str(e)}",
            }
