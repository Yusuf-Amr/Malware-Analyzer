import requests
from reputation.reputation_base import ReputationBase
from reputation.api.config_loader import load_config
from datetime import datetime

class VirusTotal(ReputationBase):
    def __init__(self):
        config = load_config()
        self.api_key = config['virus_total']

    def fetch_file_reputation(self, file_hash):
        url = f"https://www.virustotal.com/api/v3/files/{file_hash}"
        headers = {
            "x-apikey": self.api_key
        }
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            # print(f"Raw API Response: {data}")  # Debugging
            return self.extract_relevant_data(data)
        except requests.HTTPError as e:
            if e.response.status_code == 404:
                return {"error": "File not found on VirusTotal."}
            else:
                print(f"HTTP Error fetching data from VirusTotal: {e}")
                return {"error": str(e)}
        except (requests.RequestException, ValueError) as e:
            print(f"Error fetching data from VirusTotal: {e}")
            return {"error": str(e)}

    def extract_relevant_data(self, data):
        try:
            attributes = data.get('data', {}).get('attributes', {})
            # print(f"Extracted Attributes: {attributes}")  # Debugging 
            last_analysis_results = attributes.get('last_analysis_results', {})
            # print(f"Last Analysis Results: {last_analysis_results}")  # Debugging 

            filtered_results = {
                vendor: info
                for vendor, info in last_analysis_results.items()
                if info.get('category') not in ['undetected', 'clean', 'type-unsupported', 'timeout']
            }

            attributes['last_analysis_results'] = filtered_results
            return self.format_data(attributes)
        except Exception as e:
            print(f"Error extracting data: {e}")
            return {"error": str(e)}



    def get_reputation(self, file_hash):
        return self.fetch_file_reputation(file_hash)

    def format_data(self, data):
        """
        Formats the data to ensure it can be displayed correctly.
        Converts complex structures to a more readable format if needed.
        """
        if isinstance(data, dict):
            formatted_data = {}
            for key, value in data.items():
                if isinstance(value, dict) or isinstance(value, list):
                    formatted_data[key] = self.format_data(value)
                elif isinstance(value, (str, int, float)):
                    formatted_data[key] = value
                elif isinstance(value, datetime):
                    formatted_data[key] = value.isoformat()  
                else:
                    formatted_data[key] = str(value)  # Convert non-supported types to string
            return formatted_data
        elif isinstance(data, list):
            return [self.format_data(item) for item in data]
        else:
            return str(data)  # Convert non-supported types to string